(()=>{"use strict";var t={d:(e,n)=>{for(var r in n)t.o(n,r)&&!t.o(e,r)&&Object.defineProperty(e,r,{enumerable:!0,get:n[r]})}};function e(t,e,n,r){const o=document.createElement(`${t}`);if(e&&(o.id=e),n)for(const t in n)o.classList.add(n[t]);return r&&(o.innerHTML=r),o}t.g=function(){if("object"==typeof globalThis)return globalThis;try{return this||new Function("return this")()}catch(t){if("object"==typeof window)return window}}(),t.o=(t,e)=>Object.prototype.hasOwnProperty.call(t,e),(()=>{var e;t.g.importScripts&&(e=t.g.location+"");var n=t.g.document;if(!e&&n&&(n.currentScript&&(e=n.currentScript.src),!e)){var r=n.getElementsByTagName("script");r.length&&(e=r[r.length-1].src)}if(!e)throw new Error("Automatic publicPath is not supported in this browser");e=e.replace(/#.*$/,"").replace(/\?.*$/,"").replace(/\/[^\/]+$/,"/"),t.p=e})(),t.d({},{d:()=>r});const n=t.p+"0f64e87a14712da16519.png",r=document.getElementById("content");!function(){const t=e("nav","navbar"),n=e("h1","name","","Pizzarray");t.appendChild(n),["home","menu","about"].forEach((n=>{const r=e("a","",[n],`${n}`);t.appendChild(r)})),r.appendChild(t)}(),function(){const t=e("footer","footer"),o=e("a","footer-a","","Copyright pearsettings44"),i=e("a");i.href="https://github.com/pearsettings44",i.target="_blank";const a=e("img","git");a.src=n,a.alt="github icon",t.appendChild(o),i.appendChild(a),t.appendChild(i),r.appendChild(t)}()})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,